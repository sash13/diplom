
main.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000006ee  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .bss          0000002b  00800100  00800100  00000762  2**0
                  ALLOC
  2 .debug_aranges 00000020  00000000  00000000  00000762  2**0
                  CONTENTS, READONLY, DEBUGGING
  3 .debug_pubnames 00000105  00000000  00000000  00000782  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_info   000004a9  00000000  00000000  00000887  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_abbrev 0000021a  00000000  00000000  00000d30  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_line   000004a0  00000000  00000000  00000f4a  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_frame  000000a0  00000000  00000000  000013ec  2**2
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_str    000001b6  00000000  00000000  0000148c  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_loc    000002ee  00000000  00000000  00001642  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_ranges 00000048  00000000  00000000  00001930  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
   8:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
   c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  10:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  14:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  18:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  1c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  20:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  24:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  28:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  2c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  30:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  34:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  38:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  3c:	0c 94 01 01 	jmp	0x202	; 0x202 <__vector_15>
  40:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  44:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  48:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  4c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  50:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  54:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  58:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  5c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  60:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  64:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d4 e0       	ldi	r29, 0x04	; 4
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_clear_bss>:
  74:	11 e0       	ldi	r17, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	01 c0       	rjmp	.+2      	; 0x7e <.do_clear_bss_start>

0000007c <.do_clear_bss_loop>:
  7c:	1d 92       	st	X+, r1

0000007e <.do_clear_bss_start>:
  7e:	ab 32       	cpi	r26, 0x2B	; 43
  80:	b1 07       	cpc	r27, r17
  82:	e1 f7       	brne	.-8      	; 0x7c <.do_clear_bss_loop>
  84:	0e 94 9c 02 	call	0x538	; 0x538 <main>
  88:	0c 94 75 03 	jmp	0x6ea	; 0x6ea <_exit>

0000008c <__bad_interrupt>:
  8c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000090 <Servo_add>:
        }
        
}
//============================================================================
void Servo_add(u08 Number, u08 Pos)
{
  90:	cf 93       	push	r28
  92:	df 93       	push	r29
u08 i,k;
SArray_def *tmp;
Servo[Number].Position = Pos;
  94:	e8 2f       	mov	r30, r24
  96:	f0 e0       	ldi	r31, 0x00	; 0
  98:	ee 0f       	add	r30, r30
  9a:	ff 1f       	adc	r31, r31
  9c:	e4 5f       	subi	r30, 0xF4	; 244
  9e:	fe 4f       	sbci	r31, 0xFE	; 254
  a0:	60 83       	st	Z, r22
  a2:	41 e0       	ldi	r20, 0x01	; 1
  a4:	51 e0       	ldi	r21, 0x01	; 1
  a6:	07 c0       	rjmp	.+14     	; 0xb6 <Servo_add+0x26>
for(i=1;i<MaxServo;i++)
        {
        for(k=i;((k>0)&&(Servo_sorted[k]->Position < Servo_sorted[k-1]->Position));k--)
                {
                tmp = Servo_sorted[k];                                  // Swap [k,k-1] 
                Servo_sorted[k]=Servo_sorted[k-1];
  a8:	d9 01       	movw	r26, r18
  aa:	6d 93       	st	X+, r22
  ac:	7c 93       	st	X, r23
                Servo_sorted[k-1]=tmp;
  ae:	d1 83       	std	Z+1, r29	; 0x01
  b0:	c0 83       	st	Z, r28
SArray_def *tmp;
Servo[Number].Position = Pos;
// Сортируем массив
for(i=1;i<MaxServo;i++)
        {
        for(k=i;((k>0)&&(Servo_sorted[k]->Position < Servo_sorted[k-1]->Position));k--)
  b2:	41 50       	subi	r20, 0x01	; 1
  b4:	a1 f0       	breq	.+40     	; 0xde <Servo_add+0x4e>
  b6:	84 2f       	mov	r24, r20
  b8:	90 e0       	ldi	r25, 0x00	; 0
  ba:	88 0f       	add	r24, r24
  bc:	99 1f       	adc	r25, r25
  be:	9c 01       	movw	r18, r24
  c0:	21 5e       	subi	r18, 0xE1	; 225
  c2:	3e 4f       	sbci	r19, 0xFE	; 254
  c4:	f9 01       	movw	r30, r18
  c6:	c0 81       	ld	r28, Z
  c8:	d1 81       	ldd	r29, Z+1	; 0x01
  ca:	fc 01       	movw	r30, r24
  cc:	e3 5e       	subi	r30, 0xE3	; 227
  ce:	fe 4f       	sbci	r31, 0xFE	; 254
  d0:	60 81       	ld	r22, Z
  d2:	71 81       	ldd	r23, Z+1	; 0x01
  d4:	98 81       	ld	r25, Y
  d6:	db 01       	movw	r26, r22
  d8:	8c 91       	ld	r24, X
  da:	98 17       	cp	r25, r24
  dc:	28 f3       	brcs	.-54     	; 0xa8 <Servo_add+0x18>
{
u08 i,k;
SArray_def *tmp;
Servo[Number].Position = Pos;
// Сортируем массив
for(i=1;i<MaxServo;i++)
  de:	5f 5f       	subi	r21, 0xFF	; 255
  e0:	45 2f       	mov	r20, r21
  e2:	56 30       	cpi	r21, 0x06	; 6
  e4:	41 f7       	brne	.-48     	; 0xb6 <Servo_add+0x26>
                tmp = Servo_sorted[k];                                  // Swap [k,k-1] 
                Servo_sorted[k]=Servo_sorted[k-1];
                Servo_sorted[k-1]=tmp;
                }
        }
}
  e6:	df 91       	pop	r29
  e8:	cf 91       	pop	r28
  ea:	08 95       	ret

000000ec <Servo_sort>:
//============================================================================
void Servo_sort(void) 
{
  ec:	cf 93       	push	r28
  ee:	df 93       	push	r29
  f0:	41 e0       	ldi	r20, 0x01	; 1
  f2:	51 e0       	ldi	r21, 0x01	; 1
  f4:	07 c0       	rjmp	.+14     	; 0x104 <Servo_sort+0x18>
for(i=1;i<MaxServo;i++)
        {
        for(k=i;((k>0)&&(Servo_sorted[k]->Position < Servo_sorted[k-1]->Position));k--)
                {       
                tmp = Servo_sorted[k];                                  // Swap [k,k-1] 
                Servo_sorted[k]=Servo_sorted[k-1];
  f6:	d9 01       	movw	r26, r18
  f8:	6d 93       	st	X+, r22
  fa:	7c 93       	st	X, r23
                Servo_sorted[k-1]=tmp;
  fc:	d1 83       	std	Z+1, r29	; 0x01
  fe:	c0 83       	st	Z, r28
u08 i,k;
SArray_def *tmp;

for(i=1;i<MaxServo;i++)
        {
        for(k=i;((k>0)&&(Servo_sorted[k]->Position < Servo_sorted[k-1]->Position));k--)
 100:	41 50       	subi	r20, 0x01	; 1
 102:	a1 f0       	breq	.+40     	; 0x12c <Servo_sort+0x40>
 104:	84 2f       	mov	r24, r20
 106:	90 e0       	ldi	r25, 0x00	; 0
 108:	88 0f       	add	r24, r24
 10a:	99 1f       	adc	r25, r25
 10c:	9c 01       	movw	r18, r24
 10e:	21 5e       	subi	r18, 0xE1	; 225
 110:	3e 4f       	sbci	r19, 0xFE	; 254
 112:	f9 01       	movw	r30, r18
 114:	c0 81       	ld	r28, Z
 116:	d1 81       	ldd	r29, Z+1	; 0x01
 118:	fc 01       	movw	r30, r24
 11a:	e3 5e       	subi	r30, 0xE3	; 227
 11c:	fe 4f       	sbci	r31, 0xFE	; 254
 11e:	60 81       	ld	r22, Z
 120:	71 81       	ldd	r23, Z+1	; 0x01
 122:	98 81       	ld	r25, Y
 124:	db 01       	movw	r26, r22
 126:	8c 91       	ld	r24, X
 128:	98 17       	cp	r25, r24
 12a:	28 f3       	brcs	.-54     	; 0xf6 <Servo_sort+0xa>
void Servo_sort(void) 
{
u08 i,k;
SArray_def *tmp;

for(i=1;i<MaxServo;i++)
 12c:	5f 5f       	subi	r21, 0xFF	; 255
 12e:	45 2f       	mov	r20, r21
 130:	56 30       	cpi	r21, 0x06	; 6
 132:	41 f7       	brne	.-48     	; 0x104 <Servo_sort+0x18>
                Servo_sorted[k]=Servo_sorted[k-1];
                Servo_sorted[k-1]=tmp;
                }

        }
}
 134:	df 91       	pop	r29
 136:	cf 91       	pop	r28
 138:	08 95       	ret

0000013a <Servo_upd>:
//============================================================================
void Servo_upd(void)
{
 13a:	0f 93       	push	r16
 13c:	1f 93       	push	r17
 13e:	cf 93       	push	r28
 140:	df 93       	push	r29
 142:	00 91 02 01 	lds	r16, 0x0102
 146:	40 e0       	ldi	r20, 0x00	; 0
 148:	10 e0       	ldi	r17, 0x00	; 0
u08 i,j,k;
 
for(i=0,k=0;i<MaxServo;i++,k++)
{
        if(Servo_sorted[i]->Position)
 14a:	64 2f       	mov	r22, r20
 14c:	70 e0       	ldi	r23, 0x00	; 0
 14e:	fb 01       	movw	r30, r22
 150:	ee 0f       	add	r30, r30
 152:	ff 1f       	adc	r31, r31
 154:	e1 5e       	subi	r30, 0xE1	; 225
 156:	fe 4f       	sbci	r31, 0xFE	; 254
 158:	c0 81       	ld	r28, Z
 15a:	d1 81       	ldd	r29, Z+1	; 0x01
 15c:	98 81       	ld	r25, Y
 15e:	99 23       	and	r25, r25
 160:	11 f0       	breq	.+4      	; 0x166 <Servo_upd+0x2c>
            servo_on |= Servo_sorted[i]->Bit;//kostyli
 162:	89 81       	ldd	r24, Y+1	; 0x01
 164:	08 2b       	or	r16, r24

        if(Servo_sorted[i]->Position!=Servo_sorted[i+1]->Position)      //Если значения уникальные
 166:	fb 01       	movw	r30, r22
 168:	ee 0f       	add	r30, r30
 16a:	ff 1f       	adc	r31, r31
 16c:	ef 5d       	subi	r30, 0xDF	; 223
 16e:	fe 4f       	sbci	r31, 0xFE	; 254
 170:	01 90       	ld	r0, Z+
 172:	f0 81       	ld	r31, Z
 174:	e0 2d       	mov	r30, r0
 176:	80 81       	ld	r24, Z
 178:	a1 2f       	mov	r26, r17
 17a:	b0 e0       	ldi	r27, 0x00	; 0
 17c:	98 17       	cp	r25, r24
 17e:	51 f0       	breq	.+20     	; 0x194 <Servo_upd+0x5a>
        {
        ServoNextOCR[k] = Servo_sorted[i]->Position;                    // Записываем их как есть
 180:	fd 01       	movw	r30, r26
 182:	ed 5f       	subi	r30, 0xFD	; 253
 184:	fe 4f       	sbci	r31, 0xFE	; 254
 186:	90 83       	st	Z, r25
        ServoPortState[k+1] = Servo_sorted[i]->Bit;                     // И битмаску туда же
 188:	a8 5e       	subi	r26, 0xE8	; 232
 18a:	be 4f       	sbci	r27, 0xFE	; 254
 18c:	89 81       	ldd	r24, Y+1	; 0x01
 18e:	11 96       	adiw	r26, 0x01	; 1
 190:	8c 93       	st	X, r24
 192:	25 c0       	rjmp	.+74     	; 0x1de <Servo_upd+0xa4>
        }
        else                                                            // Но если совпадает со следующим
        {
        ServoNextOCR[k] = Servo_sorted[i]->Position;                    // Позицию записываем
 194:	fd 01       	movw	r30, r26
 196:	ed 5f       	subi	r30, 0xFD	; 253
 198:	fe 4f       	sbci	r31, 0xFE	; 254
 19a:	90 83       	st	Z, r25
        ServoPortState[k+1] = Servo_sorted[i]->Bit;                     // Записываем битмаску
 19c:	fd 01       	movw	r30, r26
 19e:	e7 5e       	subi	r30, 0xE7	; 231
 1a0:	fe 4f       	sbci	r31, 0xFE	; 254
 1a2:	89 81       	ldd	r24, Y+1	; 0x01
 1a4:	80 83       	st	Z, r24
 1a6:	51 e0       	ldi	r21, 0x01	; 1
        // И в цикле ищем все аналогичные позиции, склеивая их битмаски в одну.
 
        for(j=1;(Servo_sorted[i]->Position == Servo_sorted[i+j]->Position)&&(i+j<MaxServo);j++)
                {

                ServoPortState[k+1] |= Servo_sorted[i+j]->Bit;
 1a8:	df 01       	movw	r26, r30
 1aa:	05 c0       	rjmp	.+10     	; 0x1b6 <Servo_upd+0x7c>
 1ac:	8c 91       	ld	r24, X
 1ae:	91 81       	ldd	r25, Z+1	; 0x01
 1b0:	89 2b       	or	r24, r25
 1b2:	8c 93       	st	X, r24
        ServoNextOCR[k] = Servo_sorted[i]->Position;                    // Позицию записываем
        ServoPortState[k+1] = Servo_sorted[i]->Bit;                     // Записываем битмаску
 
        // И в цикле ищем все аналогичные позиции, склеивая их битмаски в одну.
 
        for(j=1;(Servo_sorted[i]->Position == Servo_sorted[i+j]->Position)&&(i+j<MaxServo);j++)
 1b4:	5f 5f       	subi	r21, 0xFF	; 255
 1b6:	9b 01       	movw	r18, r22
 1b8:	25 0f       	add	r18, r21
 1ba:	31 1d       	adc	r19, r1
 1bc:	f9 01       	movw	r30, r18
 1be:	ee 0f       	add	r30, r30
 1c0:	ff 1f       	adc	r31, r31
 1c2:	e1 5e       	subi	r30, 0xE1	; 225
 1c4:	fe 4f       	sbci	r31, 0xFE	; 254
 1c6:	01 90       	ld	r0, Z+
 1c8:	f0 81       	ld	r31, Z
 1ca:	e0 2d       	mov	r30, r0
 1cc:	98 81       	ld	r25, Y
 1ce:	80 81       	ld	r24, Z
 1d0:	98 17       	cp	r25, r24
 1d2:	19 f4       	brne	.+6      	; 0x1da <Servo_upd+0xa0>
 1d4:	26 30       	cpi	r18, 0x06	; 6
 1d6:	31 05       	cpc	r19, r1
 1d8:	4c f3       	brlt	.-46     	; 0x1ac <Servo_upd+0x72>
                {

                ServoPortState[k+1] |= Servo_sorted[i+j]->Bit;
                }
        i+=j-1;                                         // Перед выходом корректируем индекс
 1da:	41 50       	subi	r20, 0x01	; 1
 1dc:	45 0f       	add	r20, r21
//============================================================================
void Servo_upd(void)
{
u08 i,j,k;
 
for(i=0,k=0;i<MaxServo;i++,k++)
 1de:	4f 5f       	subi	r20, 0xFF	; 255
 1e0:	1f 5f       	subi	r17, 0xFF	; 255
 1e2:	46 30       	cpi	r20, 0x06	; 6
 1e4:	08 f4       	brcc	.+2      	; 0x1e8 <Servo_upd+0xae>
 1e6:	b1 cf       	rjmp	.-158    	; 0x14a <Servo_upd+0x10>
 1e8:	00 93 02 01 	sts	0x0102, r16
                ServoPortState[k+1] |= Servo_sorted[i+j]->Bit;
                }
        i+=j-1;                                         // Перед выходом корректируем индекс
        }                                               // На глубину зарывания в повторы
}       
ServoNextOCR[k] = 0xFF;                                 // В последний элемент вписываем заглушку FF.
 1ec:	e1 2f       	mov	r30, r17
 1ee:	f0 e0       	ldi	r31, 0x00	; 0
 1f0:	ed 5f       	subi	r30, 0xFD	; 253
 1f2:	fe 4f       	sbci	r31, 0xFE	; 254
 1f4:	8f ef       	ldi	r24, 0xFF	; 255
 1f6:	80 83       	st	Z, r24
}
 1f8:	df 91       	pop	r29
 1fa:	cf 91       	pop	r28
 1fc:	1f 91       	pop	r17
 1fe:	0f 91       	pop	r16
 200:	08 95       	ret

00000202 <__vector_15>:
 
SArray_def Servo[MaxServo];
SArray_def *Servo_sorted[MaxServo];
//============================================================================
ISR(TIMER0_COMPB_vect)                           // Прерывание по совпадению
{
 202:	1f 92       	push	r1
 204:	0f 92       	push	r0
 206:	0f b6       	in	r0, 0x3f	; 63
 208:	0f 92       	push	r0
 20a:	11 24       	eor	r1, r1
 20c:	2f 93       	push	r18
 20e:	3f 93       	push	r19
 210:	4f 93       	push	r20
 212:	5f 93       	push	r21
 214:	6f 93       	push	r22
 216:	7f 93       	push	r23
 218:	8f 93       	push	r24
 21a:	9f 93       	push	r25
 21c:	af 93       	push	r26
 21e:	bf 93       	push	r27
 220:	ef 93       	push	r30
 222:	ff 93       	push	r31
if (servo_state)                                // Если не нулевое состояние то
 224:	90 91 01 01 	lds	r25, 0x0101
 228:	99 23       	and	r25, r25
 22a:	91 f1       	breq	.+100    	; 0x290 <__vector_15+0x8e>
        {
            if(ServoNextOCR[servo_state] == 0)
 22c:	e9 2f       	mov	r30, r25
 22e:	f0 e0       	ldi	r31, 0x00	; 0
 230:	ed 5f       	subi	r30, 0xFD	; 253
 232:	fe 4f       	sbci	r31, 0xFE	; 254
 234:	80 81       	ld	r24, Z
 236:	88 23       	and	r24, r24
 238:	19 f4       	brne	.+6      	; 0x240 <__vector_15+0x3e>
                servo_state++;
 23a:	9f 5f       	subi	r25, 0xFF	; 255
 23c:	90 93 01 01 	sts	0x0101, r25
            OCR0B = ServoNextOCR[servo_state];       // В регистр сравнения кладем следующий интервал
 240:	90 91 01 01 	lds	r25, 0x0101
 244:	a9 2f       	mov	r26, r25
 246:	b0 e0       	ldi	r27, 0x00	; 0
 248:	fd 01       	movw	r30, r26
 24a:	ed 5f       	subi	r30, 0xFD	; 253
 24c:	fe 4f       	sbci	r31, 0xFE	; 254
 24e:	80 81       	ld	r24, Z
 250:	88 bd       	out	0x28, r24	; 40

      PORTB &= ~ServoPortState[servo_state];  // Сбрасываем биты в порту, в соответствии с маской в массиве масок.          
 252:	25 b1       	in	r18, 0x05	; 5
 254:	a8 5e       	subi	r26, 0xE8	; 232
 256:	be 4f       	sbci	r27, 0xFE	; 254
 258:	8c 91       	ld	r24, X
 25a:	80 95       	com	r24
 25c:	82 23       	and	r24, r18
 25e:	85 b9       	out	0x05, r24	; 5


        servo_state++;                          // Увеличиваем состояние автомата
 260:	9f 5f       	subi	r25, 0xFF	; 255
 262:	90 93 01 01 	sts	0x0101, r25
 
        if (OCR0B == 0xFF)                               // Если значение сравнения равно FF значит это заглушка
 266:	88 b5       	in	r24, 0x28	; 40
 268:	8f 3f       	cpi	r24, 0xFF	; 255
 26a:	69 f5       	brne	.+90     	; 0x2c6 <__vector_15+0xc4>
                {                               // И мы достигли конца таблицы. И пора обнулить автомат
                servo_state = 0;                        // Выставляем нулевое состояние.
 26c:	10 92 01 01 	sts	0x0101, r1
 
                TCNT0 = 105;                    // Программируем задержку 
 270:	89 e6       	ldi	r24, 0x69	; 105
 272:	86 bd       	out	0x26, r24	; 38
                TCCR0B &= 0b11111000;            // Сбрасываем предделитель таймера
 274:	85 b5       	in	r24, 0x25	; 37
 276:	88 7f       	andi	r24, 0xF8	; 248
 278:	85 bd       	out	0x25, r24	; 37
                TCCR0B = _BV(CS02) | _BV(CS00);                  // Устанавливаем предделитель 
 27a:	85 e0       	ldi	r24, 0x05	; 5
 27c:	85 bd       	out	0x25, r24	; 37
 
                if (servo_need_update)          // Если поступил приказ обновить таблицы автомата
 27e:	80 91 00 01 	lds	r24, 0x0100
 282:	88 23       	and	r24, r24
 284:	01 f1       	breq	.+64     	; 0x2c6 <__vector_15+0xc4>
                        {
                        Servo_upd();            // Обновляем таблицы.
 286:	0e 94 9d 00 	call	0x13a	; 0x13a <Servo_upd>
                        servo_need_update = 0;  // Сбрасываем сигнал обновления.
 28a:	10 92 00 01 	sts	0x0100, r1
 28e:	1b c0       	rjmp	.+54     	; 0x2c6 <__vector_15+0xc4>
                        }
                }
        }
else                                            // Нулевое состояние автомата. Новый цикл
        {
        if(ServoNextOCR[servo_state] == 0)
 290:	80 91 03 01 	lds	r24, 0x0103
 294:	88 23       	and	r24, r24
 296:	19 f4       	brne	.+6      	; 0x29e <__vector_15+0x9c>
            servo_state++;
 298:	81 e0       	ldi	r24, 0x01	; 1
 29a:	80 93 01 01 	sts	0x0101, r24
        OCR0B = ServoNextOCR[servo_state];               // Берем первую выдержку.
 29e:	90 91 01 01 	lds	r25, 0x0101
 2a2:	e9 2f       	mov	r30, r25
 2a4:	f0 e0       	ldi	r31, 0x00	; 0
 2a6:	ed 5f       	subi	r30, 0xFD	; 253
 2a8:	fe 4f       	sbci	r31, 0xFE	; 254
 2aa:	80 81       	ld	r24, Z
 2ac:	88 bd       	out	0x28, r24	; 40
 
        TCCR0B &= 0b11111000;                    // Сбрасываем предделитель
 2ae:	85 b5       	in	r24, 0x25	; 37
 2b0:	88 7f       	andi	r24, 0xF8	; 248
 2b2:	85 bd       	out	0x25, r24	; 37
        TCCR0B |= 0x04;                          // Предделитель 
 2b4:	85 b5       	in	r24, 0x25	; 37
 2b6:	84 60       	ori	r24, 0x04	; 4
 2b8:	85 bd       	out	0x25, r24	; 37
        PORTB = servo_on;
 2ba:	80 91 02 01 	lds	r24, 0x0102
 2be:	85 b9       	out	0x05, r24	; 5
        servo_state++;                          // Увеличиваем состояние конечного автомата. 
 2c0:	9f 5f       	subi	r25, 0xFF	; 255
 2c2:	90 93 01 01 	sts	0x0101, r25
        }
        
}
 2c6:	ff 91       	pop	r31
 2c8:	ef 91       	pop	r30
 2ca:	bf 91       	pop	r27
 2cc:	af 91       	pop	r26
 2ce:	9f 91       	pop	r25
 2d0:	8f 91       	pop	r24
 2d2:	7f 91       	pop	r23
 2d4:	6f 91       	pop	r22
 2d6:	5f 91       	pop	r21
 2d8:	4f 91       	pop	r20
 2da:	3f 91       	pop	r19
 2dc:	2f 91       	pop	r18
 2de:	0f 90       	pop	r0
 2e0:	0f be       	out	0x3f, r0	; 63
 2e2:	0f 90       	pop	r0
 2e4:	1f 90       	pop	r1
 2e6:	18 95       	reti

000002e8 <servo_flush>:

int i;

void servo_flush() 
{
        Servo_sort(); 
 2e8:	0e 94 76 00 	call	0xec	; 0xec <Servo_sort>
        //Servo_upd(); 
        servo_need_update = 1;
 2ec:	81 e0       	ldi	r24, 0x01	; 1
 2ee:	80 93 00 01 	sts	0x0100, r24
}
 2f2:	08 95       	ret

000002f4 <map>:

long map(long x, long in_min, long in_max, long out_min, long out_max)
{
 2f4:	2f 92       	push	r2
 2f6:	3f 92       	push	r3
 2f8:	4f 92       	push	r4
 2fa:	5f 92       	push	r5
 2fc:	6f 92       	push	r6
 2fe:	7f 92       	push	r7
 300:	8f 92       	push	r8
 302:	9f 92       	push	r9
 304:	af 92       	push	r10
 306:	bf 92       	push	r11
 308:	cf 92       	push	r12
 30a:	df 92       	push	r13
 30c:	ef 92       	push	r14
 30e:	ff 92       	push	r15
 310:	0f 93       	push	r16
 312:	1f 93       	push	r17
 314:	df 93       	push	r29
 316:	cf 93       	push	r28
 318:	cd b7       	in	r28, 0x3d	; 61
 31a:	de b7       	in	r29, 0x3e	; 62
 31c:	3b 01       	movw	r6, r22
 31e:	4c 01       	movw	r8, r24
 320:	19 01       	movw	r2, r18
 322:	2a 01       	movw	r4, r20
 324:	6d 89       	ldd	r22, Y+21	; 0x15
 326:	7e 89       	ldd	r23, Y+22	; 0x16
 328:	8f 89       	ldd	r24, Y+23	; 0x17
 32a:	98 8d       	ldd	r25, Y+24	; 0x18
 32c:	6a 19       	sub	r22, r10
 32e:	7b 09       	sbc	r23, r11
 330:	8c 09       	sbc	r24, r12
 332:	9d 09       	sbc	r25, r13
 334:	62 1a       	sub	r6, r18
 336:	73 0a       	sbc	r7, r19
 338:	84 0a       	sbc	r8, r20
 33a:	95 0a       	sbc	r9, r21
 33c:	a4 01       	movw	r20, r8
 33e:	93 01       	movw	r18, r6
 340:	0e 94 19 03 	call	0x632	; 0x632 <__mulsi3>
 344:	e2 18       	sub	r14, r2
 346:	f3 08       	sbc	r15, r3
 348:	04 09       	sbc	r16, r4
 34a:	15 09       	sbc	r17, r5
 34c:	a8 01       	movw	r20, r16
 34e:	97 01       	movw	r18, r14
 350:	0e 94 38 03 	call	0x670	; 0x670 <__divmodsi4>
 354:	2a 0d       	add	r18, r10
 356:	3b 1d       	adc	r19, r11
 358:	4c 1d       	adc	r20, r12
 35a:	5d 1d       	adc	r21, r13
  return (x - in_min) * (out_max - out_min) / (in_max - in_min) + out_min;
}
 35c:	b9 01       	movw	r22, r18
 35e:	ca 01       	movw	r24, r20
 360:	cf 91       	pop	r28
 362:	df 91       	pop	r29
 364:	1f 91       	pop	r17
 366:	0f 91       	pop	r16
 368:	ff 90       	pop	r15
 36a:	ef 90       	pop	r14
 36c:	df 90       	pop	r13
 36e:	cf 90       	pop	r12
 370:	bf 90       	pop	r11
 372:	af 90       	pop	r10
 374:	9f 90       	pop	r9
 376:	8f 90       	pop	r8
 378:	7f 90       	pop	r7
 37a:	6f 90       	pop	r6
 37c:	5f 90       	pop	r5
 37e:	4f 90       	pop	r4
 380:	3f 90       	pop	r3
 382:	2f 90       	pop	r2
 384:	08 95       	ret

00000386 <Servo_Init>:
}       
ServoNextOCR[k] = 0xFF;                                 // В последний элемент вписываем заглушку FF.
}
//============================================================================
void Servo_Init(void)
{
 386:	6f 92       	push	r6
 388:	7f 92       	push	r7
 38a:	8f 92       	push	r8
 38c:	9f 92       	push	r9
 38e:	af 92       	push	r10
 390:	bf 92       	push	r11
 392:	cf 92       	push	r12
 394:	df 92       	push	r13
 396:	ef 92       	push	r14
 398:	ff 92       	push	r15
 39a:	0f 93       	push	r16
 39c:	1f 93       	push	r17
Servo_sorted[0]   = &Servo[0];
 39e:	8c e0       	ldi	r24, 0x0C	; 12
 3a0:	91 e0       	ldi	r25, 0x01	; 1
 3a2:	90 93 20 01 	sts	0x0120, r25
 3a6:	80 93 1f 01 	sts	0x011F, r24
Servo_sorted[1]   = &Servo[1];
 3aa:	02 96       	adiw	r24, 0x02	; 2
 3ac:	90 93 22 01 	sts	0x0122, r25
 3b0:	80 93 21 01 	sts	0x0121, r24
Servo_sorted[2]   = &Servo[2];
 3b4:	02 96       	adiw	r24, 0x02	; 2
 3b6:	90 93 24 01 	sts	0x0124, r25
 3ba:	80 93 23 01 	sts	0x0123, r24
Servo_sorted[3]   = &Servo[3];
 3be:	02 96       	adiw	r24, 0x02	; 2
 3c0:	90 93 26 01 	sts	0x0126, r25
 3c4:	80 93 25 01 	sts	0x0125, r24
Servo_sorted[4]   = &Servo[4];
 3c8:	02 96       	adiw	r24, 0x02	; 2
 3ca:	90 93 28 01 	sts	0x0128, r25
 3ce:	80 93 27 01 	sts	0x0127, r24
Servo_sorted[5]   = &Servo[5];
 3d2:	02 96       	adiw	r24, 0x02	; 2
 3d4:	90 93 2a 01 	sts	0x012A, r25
 3d8:	80 93 29 01 	sts	0x0129, r24

//PORT B
Servo[0].Bit   = 0b000000000000000000000001;
 3dc:	81 e0       	ldi	r24, 0x01	; 1
 3de:	80 93 0d 01 	sts	0x010D, r24
Servo[1].Bit   = 0b000000000000000000000010;
 3e2:	82 e0       	ldi	r24, 0x02	; 2
 3e4:	80 93 0f 01 	sts	0x010F, r24
Servo[2].Bit   = 0b000000000000000000000100;
 3e8:	84 e0       	ldi	r24, 0x04	; 4
 3ea:	80 93 11 01 	sts	0x0111, r24
Servo[3].Bit   = 0b000000000000000000001000;
 3ee:	88 e0       	ldi	r24, 0x08	; 8
 3f0:	80 93 13 01 	sts	0x0113, r24
Servo[4].Bit   = 0b000000000000000000010000;
 3f4:	80 e1       	ldi	r24, 0x10	; 16
 3f6:	80 93 15 01 	sts	0x0115, r24
Servo[5].Bit   = 0b000000000000000000100000;
 3fa:	80 e2       	ldi	r24, 0x20	; 32
 3fc:	80 93 17 01 	sts	0x0117, r24

Servo[0].Position   = map(90, 0, 179, MIN_PULSE, MAX_PULSE);
 400:	00 d0       	rcall	.+0      	; 0x402 <Servo_Init+0x7c>
 402:	00 d0       	rcall	.+0      	; 0x404 <Servo_Init+0x7e>
 404:	aa e4       	ldi	r26, 0x4A	; 74
 406:	6a 2e       	mov	r6, r26
 408:	71 2c       	mov	r7, r1
 40a:	81 2c       	mov	r8, r1
 40c:	91 2c       	mov	r9, r1
 40e:	ed b7       	in	r30, 0x3d	; 61
 410:	fe b7       	in	r31, 0x3e	; 62
 412:	61 82       	std	Z+1, r6	; 0x01
 414:	72 82       	std	Z+2, r7	; 0x02
 416:	83 82       	std	Z+3, r8	; 0x03
 418:	94 82       	std	Z+4, r9	; 0x04
 41a:	6a e5       	ldi	r22, 0x5A	; 90
 41c:	70 e0       	ldi	r23, 0x00	; 0
 41e:	80 e0       	ldi	r24, 0x00	; 0
 420:	90 e0       	ldi	r25, 0x00	; 0
 422:	20 e0       	ldi	r18, 0x00	; 0
 424:	30 e0       	ldi	r19, 0x00	; 0
 426:	40 e0       	ldi	r20, 0x00	; 0
 428:	50 e0       	ldi	r21, 0x00	; 0
 42a:	f3 eb       	ldi	r31, 0xB3	; 179
 42c:	ef 2e       	mov	r14, r31
 42e:	f1 2c       	mov	r15, r1
 430:	01 2d       	mov	r16, r1
 432:	11 2d       	mov	r17, r1
 434:	e0 e1       	ldi	r30, 0x10	; 16
 436:	ae 2e       	mov	r10, r30
 438:	b1 2c       	mov	r11, r1
 43a:	c1 2c       	mov	r12, r1
 43c:	d1 2c       	mov	r13, r1
 43e:	0e 94 7a 01 	call	0x2f4	; 0x2f4 <map>
 442:	60 93 0c 01 	sts	0x010C, r22
Servo[1].Position   = map(90, 0, 179, MIN_PULSE, MAX_PULSE);
 446:	60 93 0e 01 	sts	0x010E, r22
Servo[2].Position   = map(10, 0, 179, MIN_PULSE, MAX_PULSE);
 44a:	ed b7       	in	r30, 0x3d	; 61
 44c:	fe b7       	in	r31, 0x3e	; 62
 44e:	61 82       	std	Z+1, r6	; 0x01
 450:	72 82       	std	Z+2, r7	; 0x02
 452:	83 82       	std	Z+3, r8	; 0x03
 454:	94 82       	std	Z+4, r9	; 0x04
 456:	6a e0       	ldi	r22, 0x0A	; 10
 458:	70 e0       	ldi	r23, 0x00	; 0
 45a:	80 e0       	ldi	r24, 0x00	; 0
 45c:	90 e0       	ldi	r25, 0x00	; 0
 45e:	20 e0       	ldi	r18, 0x00	; 0
 460:	30 e0       	ldi	r19, 0x00	; 0
 462:	40 e0       	ldi	r20, 0x00	; 0
 464:	50 e0       	ldi	r21, 0x00	; 0
 466:	0e 94 7a 01 	call	0x2f4	; 0x2f4 <map>
 46a:	0f 90       	pop	r0
 46c:	0f 90       	pop	r0
 46e:	0f 90       	pop	r0
 470:	0f 90       	pop	r0
 472:	60 93 10 01 	sts	0x0110, r22
Servo[3].Position   = map(10, 0, 179, MIN_PULSE, MAX_PULSE);
 476:	60 93 12 01 	sts	0x0112, r22
Servo[4].Position   = map(10, 0, 179, MIN_PULSE, MAX_PULSE);
 47a:	60 93 14 01 	sts	0x0114, r22
Servo[5].Position   = map(10, 0, 179, MIN_PULSE, MAX_PULSE);
 47e:	60 93 16 01 	sts	0x0116, r22


Servo_sort();
 482:	0e 94 76 00 	call	0xec	; 0xec <Servo_sort>
Servo_upd();
 486:	0e 94 9d 00 	call	0x13a	; 0x13a <Servo_upd>

TIMSK0 |= 1<<OCIE0B;      
 48a:	ee e6       	ldi	r30, 0x6E	; 110
 48c:	f0 e0       	ldi	r31, 0x00	; 0
 48e:	80 81       	ld	r24, Z
 490:	84 60       	ori	r24, 0x04	; 4
 492:	80 83       	st	Z, r24
TCCR0B |= 0x4;
 494:	85 b5       	in	r24, 0x25	; 37
 496:	84 60       	ori	r24, 0x04	; 4
 498:	85 bd       	out	0x25, r24	; 37
}
 49a:	1f 91       	pop	r17
 49c:	0f 91       	pop	r16
 49e:	ff 90       	pop	r15
 4a0:	ef 90       	pop	r14
 4a2:	df 90       	pop	r13
 4a4:	cf 90       	pop	r12
 4a6:	bf 90       	pop	r11
 4a8:	af 90       	pop	r10
 4aa:	9f 90       	pop	r9
 4ac:	8f 90       	pop	r8
 4ae:	7f 90       	pop	r7
 4b0:	6f 90       	pop	r6
 4b2:	08 95       	ret

000004b4 <servo_write>:
{
  return (x - in_min) * (out_max - out_min) / (in_max - in_min) + out_min;
}

void servo_write(int servo_num, int angle) 
{
 4b4:	8f 92       	push	r8
 4b6:	9f 92       	push	r9
 4b8:	af 92       	push	r10
 4ba:	bf 92       	push	r11
 4bc:	cf 92       	push	r12
 4be:	df 92       	push	r13
 4c0:	ef 92       	push	r14
 4c2:	ff 92       	push	r15
 4c4:	0f 93       	push	r16
 4c6:	1f 93       	push	r17
 4c8:	4c 01       	movw	r8, r24
  Servo[servo_num].Position   = map(angle, 0, 179, MIN_PULSE, MAX_PULSE);
 4ca:	00 d0       	rcall	.+0      	; 0x4cc <servo_write+0x18>
 4cc:	00 d0       	rcall	.+0      	; 0x4ce <servo_write+0x1a>
 4ce:	88 27       	eor	r24, r24
 4d0:	77 fd       	sbrc	r23, 7
 4d2:	80 95       	com	r24
 4d4:	98 2f       	mov	r25, r24
 4d6:	2a e4       	ldi	r18, 0x4A	; 74
 4d8:	30 e0       	ldi	r19, 0x00	; 0
 4da:	40 e0       	ldi	r20, 0x00	; 0
 4dc:	50 e0       	ldi	r21, 0x00	; 0
 4de:	ed b7       	in	r30, 0x3d	; 61
 4e0:	fe b7       	in	r31, 0x3e	; 62
 4e2:	21 83       	std	Z+1, r18	; 0x01
 4e4:	32 83       	std	Z+2, r19	; 0x02
 4e6:	43 83       	std	Z+3, r20	; 0x03
 4e8:	54 83       	std	Z+4, r21	; 0x04
 4ea:	20 e0       	ldi	r18, 0x00	; 0
 4ec:	30 e0       	ldi	r19, 0x00	; 0
 4ee:	40 e0       	ldi	r20, 0x00	; 0
 4f0:	50 e0       	ldi	r21, 0x00	; 0
 4f2:	f3 eb       	ldi	r31, 0xB3	; 179
 4f4:	ef 2e       	mov	r14, r31
 4f6:	f1 2c       	mov	r15, r1
 4f8:	01 2d       	mov	r16, r1
 4fa:	11 2d       	mov	r17, r1
 4fc:	e0 e1       	ldi	r30, 0x10	; 16
 4fe:	ae 2e       	mov	r10, r30
 500:	b1 2c       	mov	r11, r1
 502:	c1 2c       	mov	r12, r1
 504:	d1 2c       	mov	r13, r1
 506:	0e 94 7a 01 	call	0x2f4	; 0x2f4 <map>
 50a:	0f 90       	pop	r0
 50c:	0f 90       	pop	r0
 50e:	0f 90       	pop	r0
 510:	0f 90       	pop	r0
 512:	88 0c       	add	r8, r8
 514:	99 1c       	adc	r9, r9
 516:	8c e0       	ldi	r24, 0x0C	; 12
 518:	91 e0       	ldi	r25, 0x01	; 1
 51a:	88 0e       	add	r8, r24
 51c:	99 1e       	adc	r9, r25
 51e:	f4 01       	movw	r30, r8
 520:	60 83       	st	Z, r22
}
 522:	1f 91       	pop	r17
 524:	0f 91       	pop	r16
 526:	ff 90       	pop	r15
 528:	ef 90       	pop	r14
 52a:	df 90       	pop	r13
 52c:	cf 90       	pop	r12
 52e:	bf 90       	pop	r11
 530:	af 90       	pop	r10
 532:	9f 90       	pop	r9
 534:	8f 90       	pop	r8
 536:	08 95       	ret

00000538 <main>:

int main (void) {
 538:	ef 92       	push	r14
 53a:	ff 92       	push	r15
 53c:	0f 93       	push	r16
 53e:	1f 93       	push	r17
 540:	cf 93       	push	r28
 542:	df 93       	push	r29

    DDRB=0b00111111;
 544:	8f e3       	ldi	r24, 0x3F	; 63
 546:	84 b9       	out	0x04, r24	; 4
    PORTB=0b00000000;
 548:	15 b8       	out	0x05, r1	; 5
       // UBRRL = 92;
      //  UCSRB = (1<<RXEN) | (1<<TXEN);
      //  UCSRC = (1<<URSEL) | (1<<UCSZ1) | (1<<UCSZ0); 


Servo_Init();
 54a:	0e 94 c3 01 	call	0x386	; 0x386 <Servo_Init>
DDRD |= 1 << PORTD6;
 54e:	56 9a       	sbi	0x0a, 6	; 10
sei();                     
 550:	78 94       	sei
while (1) {
  for (i=0; i<180; i++) {  
    servo_write(0, i);
    servo_write(1, 180-i);
 552:	04 eb       	ldi	r16, 0xB4	; 180
 554:	10 e0       	ldi	r17, 0x00	; 0
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
 556:	c8 ec       	ldi	r28, 0xC8	; 200
 558:	d0 e0       	ldi	r29, 0x00	; 0
 55a:	a4 eb       	ldi	r26, 0xB4	; 180
 55c:	ea 2e       	mov	r14, r26
 55e:	f1 2c       	mov	r15, r1

Servo_Init();
DDRD |= 1 << PORTD6;
sei();                     
while (1) {
  for (i=0; i<180; i++) {  
 560:	10 92 0b 01 	sts	0x010B, r1
 564:	10 92 0a 01 	sts	0x010A, r1
 568:	21 c0       	rjmp	.+66     	; 0x5ac <main+0x74>
    servo_write(0, i);
 56a:	80 e0       	ldi	r24, 0x00	; 0
 56c:	90 e0       	ldi	r25, 0x00	; 0
 56e:	0e 94 5a 02 	call	0x4b4	; 0x4b4 <servo_write>
    servo_write(1, 180-i);
 572:	80 91 0a 01 	lds	r24, 0x010A
 576:	90 91 0b 01 	lds	r25, 0x010B
 57a:	b8 01       	movw	r22, r16
 57c:	68 1b       	sub	r22, r24
 57e:	79 0b       	sbc	r23, r25
 580:	81 e0       	ldi	r24, 0x01	; 1
 582:	90 e0       	ldi	r25, 0x00	; 0
 584:	0e 94 5a 02 	call	0x4b4	; 0x4b4 <servo_write>
    servo_flush();
 588:	0e 94 74 01 	call	0x2e8	; 0x2e8 <servo_flush>
 58c:	84 ef       	ldi	r24, 0xF4	; 244
 58e:	91 e0       	ldi	r25, 0x01	; 1
 590:	fe 01       	movw	r30, r28
 592:	31 97       	sbiw	r30, 0x01	; 1
 594:	f1 f7       	brne	.-4      	; 0x592 <main+0x5a>
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
 596:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
 598:	d9 f7       	brne	.-10     	; 0x590 <main+0x58>

Servo_Init();
DDRD |= 1 << PORTD6;
sei();                     
while (1) {
  for (i=0; i<180; i++) {  
 59a:	80 91 0a 01 	lds	r24, 0x010A
 59e:	90 91 0b 01 	lds	r25, 0x010B
 5a2:	01 96       	adiw	r24, 0x01	; 1
 5a4:	90 93 0b 01 	sts	0x010B, r25
 5a8:	80 93 0a 01 	sts	0x010A, r24
 5ac:	60 91 0a 01 	lds	r22, 0x010A
 5b0:	70 91 0b 01 	lds	r23, 0x010B
 5b4:	64 3b       	cpi	r22, 0xB4	; 180
 5b6:	71 05       	cpc	r23, r1
 5b8:	c4 f2       	brlt	.-80     	; 0x56a <main+0x32>
 5ba:	88 ee       	ldi	r24, 0xE8	; 232
 5bc:	93 e0       	ldi	r25, 0x03	; 3
 5be:	fe 01       	movw	r30, r28
 5c0:	31 97       	sbiw	r30, 0x01	; 1
 5c2:	f1 f7       	brne	.-4      	; 0x5c0 <main+0x88>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
 5c4:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
 5c6:	d9 f7       	brne	.-10     	; 0x5be <main+0x86>
    //printf("angle: %d  pulse: %d\n", i, Servo[0].Position);    
    _delay_ms(50);
  }
  _delay_ms(100);

  for (i=180; i>0; i--) {  
 5c8:	f0 92 0b 01 	sts	0x010B, r15
 5cc:	e0 92 0a 01 	sts	0x010A, r14
 5d0:	21 c0       	rjmp	.+66     	; 0x614 <main+0xdc>
    servo_write(0, i);
 5d2:	80 e0       	ldi	r24, 0x00	; 0
 5d4:	90 e0       	ldi	r25, 0x00	; 0
 5d6:	0e 94 5a 02 	call	0x4b4	; 0x4b4 <servo_write>
    servo_write(1, 180-i);
 5da:	80 91 0a 01 	lds	r24, 0x010A
 5de:	90 91 0b 01 	lds	r25, 0x010B
 5e2:	b8 01       	movw	r22, r16
 5e4:	68 1b       	sub	r22, r24
 5e6:	79 0b       	sbc	r23, r25
 5e8:	81 e0       	ldi	r24, 0x01	; 1
 5ea:	90 e0       	ldi	r25, 0x00	; 0
 5ec:	0e 94 5a 02 	call	0x4b4	; 0x4b4 <servo_write>
    servo_flush();
 5f0:	0e 94 74 01 	call	0x2e8	; 0x2e8 <servo_flush>
 5f4:	84 ef       	ldi	r24, 0xF4	; 244
 5f6:	91 e0       	ldi	r25, 0x01	; 1
 5f8:	fe 01       	movw	r30, r28
 5fa:	31 97       	sbiw	r30, 0x01	; 1
 5fc:	f1 f7       	brne	.-4      	; 0x5fa <main+0xc2>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
 5fe:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
 600:	d9 f7       	brne	.-10     	; 0x5f8 <main+0xc0>
    //printf("angle: %d  pulse: %d\n", i, Servo[0].Position);    
    _delay_ms(50);
  }
  _delay_ms(100);

  for (i=180; i>0; i--) {  
 602:	80 91 0a 01 	lds	r24, 0x010A
 606:	90 91 0b 01 	lds	r25, 0x010B
 60a:	01 97       	sbiw	r24, 0x01	; 1
 60c:	90 93 0b 01 	sts	0x010B, r25
 610:	80 93 0a 01 	sts	0x010A, r24
 614:	60 91 0a 01 	lds	r22, 0x010A
 618:	70 91 0b 01 	lds	r23, 0x010B
 61c:	16 16       	cp	r1, r22
 61e:	17 06       	cpc	r1, r23
 620:	c4 f2       	brlt	.-80     	; 0x5d2 <main+0x9a>
 622:	88 ee       	ldi	r24, 0xE8	; 232
 624:	93 e0       	ldi	r25, 0x03	; 3
 626:	fe 01       	movw	r30, r28
 628:	31 97       	sbiw	r30, 0x01	; 1
 62a:	f1 f7       	brne	.-4      	; 0x628 <main+0xf0>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
 62c:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
 62e:	d9 f7       	brne	.-10     	; 0x626 <main+0xee>
 630:	97 cf       	rjmp	.-210    	; 0x560 <main+0x28>

00000632 <__mulsi3>:
 632:	62 9f       	mul	r22, r18
 634:	d0 01       	movw	r26, r0
 636:	73 9f       	mul	r23, r19
 638:	f0 01       	movw	r30, r0
 63a:	82 9f       	mul	r24, r18
 63c:	e0 0d       	add	r30, r0
 63e:	f1 1d       	adc	r31, r1
 640:	64 9f       	mul	r22, r20
 642:	e0 0d       	add	r30, r0
 644:	f1 1d       	adc	r31, r1
 646:	92 9f       	mul	r25, r18
 648:	f0 0d       	add	r31, r0
 64a:	83 9f       	mul	r24, r19
 64c:	f0 0d       	add	r31, r0
 64e:	74 9f       	mul	r23, r20
 650:	f0 0d       	add	r31, r0
 652:	65 9f       	mul	r22, r21
 654:	f0 0d       	add	r31, r0
 656:	99 27       	eor	r25, r25
 658:	72 9f       	mul	r23, r18
 65a:	b0 0d       	add	r27, r0
 65c:	e1 1d       	adc	r30, r1
 65e:	f9 1f       	adc	r31, r25
 660:	63 9f       	mul	r22, r19
 662:	b0 0d       	add	r27, r0
 664:	e1 1d       	adc	r30, r1
 666:	f9 1f       	adc	r31, r25
 668:	bd 01       	movw	r22, r26
 66a:	cf 01       	movw	r24, r30
 66c:	11 24       	eor	r1, r1
 66e:	08 95       	ret

00000670 <__divmodsi4>:
 670:	97 fb       	bst	r25, 7
 672:	09 2e       	mov	r0, r25
 674:	05 26       	eor	r0, r21
 676:	0e d0       	rcall	.+28     	; 0x694 <__divmodsi4_neg1>
 678:	57 fd       	sbrc	r21, 7
 67a:	04 d0       	rcall	.+8      	; 0x684 <__divmodsi4_neg2>
 67c:	14 d0       	rcall	.+40     	; 0x6a6 <__udivmodsi4>
 67e:	0a d0       	rcall	.+20     	; 0x694 <__divmodsi4_neg1>
 680:	00 1c       	adc	r0, r0
 682:	38 f4       	brcc	.+14     	; 0x692 <__divmodsi4_exit>

00000684 <__divmodsi4_neg2>:
 684:	50 95       	com	r21
 686:	40 95       	com	r20
 688:	30 95       	com	r19
 68a:	21 95       	neg	r18
 68c:	3f 4f       	sbci	r19, 0xFF	; 255
 68e:	4f 4f       	sbci	r20, 0xFF	; 255
 690:	5f 4f       	sbci	r21, 0xFF	; 255

00000692 <__divmodsi4_exit>:
 692:	08 95       	ret

00000694 <__divmodsi4_neg1>:
 694:	f6 f7       	brtc	.-4      	; 0x692 <__divmodsi4_exit>
 696:	90 95       	com	r25
 698:	80 95       	com	r24
 69a:	70 95       	com	r23
 69c:	61 95       	neg	r22
 69e:	7f 4f       	sbci	r23, 0xFF	; 255
 6a0:	8f 4f       	sbci	r24, 0xFF	; 255
 6a2:	9f 4f       	sbci	r25, 0xFF	; 255
 6a4:	08 95       	ret

000006a6 <__udivmodsi4>:
 6a6:	a1 e2       	ldi	r26, 0x21	; 33
 6a8:	1a 2e       	mov	r1, r26
 6aa:	aa 1b       	sub	r26, r26
 6ac:	bb 1b       	sub	r27, r27
 6ae:	fd 01       	movw	r30, r26
 6b0:	0d c0       	rjmp	.+26     	; 0x6cc <__udivmodsi4_ep>

000006b2 <__udivmodsi4_loop>:
 6b2:	aa 1f       	adc	r26, r26
 6b4:	bb 1f       	adc	r27, r27
 6b6:	ee 1f       	adc	r30, r30
 6b8:	ff 1f       	adc	r31, r31
 6ba:	a2 17       	cp	r26, r18
 6bc:	b3 07       	cpc	r27, r19
 6be:	e4 07       	cpc	r30, r20
 6c0:	f5 07       	cpc	r31, r21
 6c2:	20 f0       	brcs	.+8      	; 0x6cc <__udivmodsi4_ep>
 6c4:	a2 1b       	sub	r26, r18
 6c6:	b3 0b       	sbc	r27, r19
 6c8:	e4 0b       	sbc	r30, r20
 6ca:	f5 0b       	sbc	r31, r21

000006cc <__udivmodsi4_ep>:
 6cc:	66 1f       	adc	r22, r22
 6ce:	77 1f       	adc	r23, r23
 6d0:	88 1f       	adc	r24, r24
 6d2:	99 1f       	adc	r25, r25
 6d4:	1a 94       	dec	r1
 6d6:	69 f7       	brne	.-38     	; 0x6b2 <__udivmodsi4_loop>
 6d8:	60 95       	com	r22
 6da:	70 95       	com	r23
 6dc:	80 95       	com	r24
 6de:	90 95       	com	r25
 6e0:	9b 01       	movw	r18, r22
 6e2:	ac 01       	movw	r20, r24
 6e4:	bd 01       	movw	r22, r26
 6e6:	cf 01       	movw	r24, r30
 6e8:	08 95       	ret

000006ea <_exit>:
 6ea:	f8 94       	cli

000006ec <__stop_program>:
 6ec:	ff cf       	rjmp	.-2      	; 0x6ec <__stop_program>
