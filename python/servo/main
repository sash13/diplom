#!/usr/bin/env python
import logging
import itertools
import platform
import serial
import time
if platform.system() == 'Windows':
    import _winreg as winreg
else:
    import glob


log = logging.getLogger(__name__)

def enumerate_serial_ports():
    """
    Uses the Win32 registry to return a iterator of serial
        (COM) ports existing on this computer.
    """
    path = 'HARDWARE\\DEVICEMAP\\SERIALCOMM'
    try:
        key = winreg.OpenKey(winreg.HKEY_LOCAL_MACHINE, path)
    except WindowsError:
        raise Exception
  
    for i in itertools.count():
        try:
            val = winreg.EnumValue(key, i)
            yield (str(val[1]))  # , str(val[0]))
        except EnvironmentError:
            break

def find_port(baud, timeout):
    """
    Find the first port that is connected to an servo
    """
    if platform.system() == 'Windows':
        ports = enumerate_serial_ports()
    else:
        ports = glob.glob("/dev/ttyUSB*") + glob.glob("/dev/ttyACM*")
    for p in ports:
        log.debug('Found {0}, testing...'.format(p))
        try:
            sr = serial.Serial(p, baud, timeout=timeout)
        except (serial.serialutil.SerialException, OSError) as e:
            log.debug(str(e))
            continue
        time.sleep(2)
        ping_get = ping(sr)
        if ping_get != '1':
            log.debug('Bad version {0}. This is not a Servo!'.format(
                ping_get))
            sr.close()
            continue
        log.info('Using port {0}.'.format(p))
        if sr:
            return sr
    return None

def ping(sr):
    try:
        sr.write('V')
        sr.flush()
    except Exception:
        return None
    return sr.readline()

sr = find_port(9600, 3)
print sr
